exploratory testing:
when you ran your application and used it for the first time. Did you check the features and experiment using them? Thatâ€™s known as exploratory testing and is a form of manual testing.

integration testing:
Testing multiple components is known as integration testing.
An integration test checks that components in your application operate with each other.

Unit test:
A unit test is a smaller test, one that checks that a single component operates in the right way. A unit test helps you to isolate what is broken in your application and fix it faster.


************** UNIT TESTING*************************

EXAMPLE:
you would check the output of sum() against a known output.

>assert sum([1, 2, 3]) == 6, "Should be 6"

*********************TEST RUNNER:
he test runner is a special application designed for running tests, checking the output, and giving you tools for debugging and diagnosing tests and applications.
The three most popular test runners are:

unittest
nose or nose2
pytest

*******UNITTEST

contains both a testing framework and a test runner.

unittest requires that:

*You put your tests into classes as methods
*You use a series of special assertion methods in the unittest.TestCase class instead of the built-in assert statement


*******NOSE

You may find that over time, as you write hundreds or even thousands of tests for your application, it becomes increasingly hard to understand and use the output from unittest.

nose2 will try to discover all test scripts named test*.py and test cases inheriting from unittest.TestCase in your current directory:

> python -m nose2


*********PYTEST

pytest has some other great features:

Support for the built-in assert statement instead of using special self.assert*() methods
Support for filtering for test cases
Ability to rerun from the last failing test
An ecosystem of hundreds of plugins to extend the functionality



SIDE EFFECT:

side effect is a drawback that occurs after runnign a test for example when you runa code for testing it make chnages that we don't want for example in the database, files or code etc

HOW TO ENCOUNTER SIDE EFFECT?
*Refactoring code to follow the Single Responsibility Principle
*Mocking out any method or function calls to remove side effects
*Using integration testing instead of unit testing for this piece of the application

****************TIPS*****************

How to import a particular function from a python script?

target = __import__("my_sum.py")
sum = target.sum


Ways to execute the tests:

python -m nose2
python -m unittest test
python -m unitetest -v test (gives verbrose i.e show test name along with result)
python -m unittest discover (search the current directory for any files named test*.py and attempt to test them.)
python -m unittest discover -s tests ( where tests is the name of the directory)
python -m unittest discover -s tests -t src ( if your source code is not in the directory root and contained in a subdirectory, for example in a folder called src/)

Sourse:
https://realpython.com/python-testing/



